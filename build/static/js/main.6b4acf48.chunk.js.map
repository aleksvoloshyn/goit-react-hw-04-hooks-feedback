{"version":3,"sources":["Components/Wrapper/Wrapper.module.css","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","Components/Section/Section.jsx","Components/Wrapper/Wrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","ListGroup","horizontal","map","val","style","marginLeft","Button","variant","type","onClick","shortid","generate","Statictic","good","neutral","bad","total","positiveFeedback","Item","ProgressBar","now","label","animated","Notification","message","Section","title","children","Wrapper","App","useState","setGood","setNeutral","setBad","grades","countTotalFeedback","className","s","container","prev","Object","values","find","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b4acf48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wrapper_container__GJzoy\"};","import shortid from 'short-id';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Button, ListGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import s from './FeedbackOptions.modules.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <ListGroup horizontal>\r\n          {options.map(val => (\r\n            <li style={{ marginLeft: '18px' }} key={shortid.generate()}>\r\n              <Button\r\n                variant=\"outline-info\"\r\n                type=\"button\"\r\n                onClick={() => onLeaveFeedback(val)}\r\n              >\r\n                {val}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ListGroup>\r\n        {/* <li key={shortid.generate()}>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('good')}>\r\n            Good\r\n          </button>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('neutral')}>\r\n            Neutral\r\n          </button>\r\n          <button type=\"button\" onClick={() => onLeaveFeedback('bad')}>\r\n            Bad\r\n          </button>\r\n        </li> */}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport { FeedbackOptions };\r\n","// import s from './Statistic.module.css';\r\n// import { labels } from '../Utils/labels';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'short-id';\r\nimport { ProgressBar, ListGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Statictic({ good, neutral, bad, total, positiveFeedback }) {\r\n  return (\r\n    <>\r\n      <ListGroup>\r\n        <ul>\r\n          {/* {labels.map(label => (\r\n          <li key={shortid.generate()}>{label} :</li>\r\n        ))} */}\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar variant=\"info\" now={good} label=\"%\" />\r\n              Good: {good}\r\n            </ListGroup.Item>\r\n          </li>\r\n\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar now={neutral} label=\"%\" variant=\"success\" />\r\n              Neutral: {neutral}\r\n            </ListGroup.Item>\r\n          </li>\r\n\r\n          <li key={shortid.generate()}>\r\n            <ListGroup.Item>\r\n              <ProgressBar animated now={bad} label=\"%\" variant=\"danger\" />\r\n              Bad: {bad}\r\n            </ListGroup.Item>\r\n          </li>\r\n          <li key={shortid.generate()}>Total: {total}</li>\r\n          <li key={shortid.generate()}>\r\n            Positive Feedback: {positiveFeedback} %\r\n          </li>\r\n        </ul>\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n\r\nStatictic.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positiveFeedback: PropTypes.number,\r\n};\r\n\r\nexport { Statictic };\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nexport { Notification };\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","// import s from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport { Section };\r\n","function Wrapper({ children }) {\r\n  return <div>{children}</div>;\r\n}\r\n\r\nexport { Wrapper };\r\n","import React from 'react';\nimport { useState } from 'react';\n\nimport { FeedbackOptions } from './Components/FeedbackOptions/FeedbackOptions';\nimport { Statictic } from './Components/Statistics/Statistics';\nimport { Notification } from './Components/Notification/Notification';\nimport { Section } from './Components/Section/Section';\nimport { Wrapper } from './Components/Wrapper/Wrapper';\nimport s from './Components/Wrapper/Wrapper.module.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const grades = ['good', 'neutral', 'bad'];\n\n  // Функция увеличение значения State\n  const onLeaveFeedback = val => {\n    switch (val) {\n      case 'good':\n        setGood(prev => prev + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prev => prev + 1);\n        break;\n\n      case 'bad':\n        setBad(prev => prev + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  // Функция подсчета количества отзывов\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  // Функция вывода % позитивных отзывов (good & neutral)\n  const countPositiveFeedbackPercentage = () => {\n    return ((good + neutral) / countTotalFeedback()) * 100;\n  };\n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <div className={s.container}>\n          <Section title=\"Please leave feedbak\">\n            <FeedbackOptions\n              options={grades}\n              onLeaveFeedback={onLeaveFeedback}\n            />\n          </Section>\n\n          {Object.values(grades).find(val => val !== 0) ? (\n            <Section title=\"Statistics\">\n              <Statictic\n                good={good}\n                neutral={neutral}\n                bad={bad}\n                total={countTotalFeedback()}\n                positiveFeedback={Math.round(countPositiveFeedbackPercentage())}\n              />\n            </Section>\n          ) : (\n            <Section>\n              <Notification message=\"No feedback given\" />\n            </Section>\n          )}\n        </div>\n      </Wrapper>\n    </div>\n  );\n}\n// class App extends React.Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   // Функция увеличение значения State\n//   onLeaveFeedback = val => {\n//     this.setState(prevState => ({ [val]: prevState[val] + 1 }));\n//   };\n\n//   // Функция подсчета количества отзывов\n//   countTotalFeedback = () =>\n//     this.state.good + this.state.neutral + this.state.bad;\n\n//   // Функция вывода % позитивных отзывов (good & neutral)\n//   countPositiveFeedbackPercentage = () =>\n//     ((this.state.good + this.state.neutral) / this.countTotalFeedback()) * 100;\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <Wrapper>\n//           <div className={s.container}>\n//             <Section title=\"Please leave feedbak\">\n//               <FeedbackOptions\n//                 options={Object.keys(this.state)}\n//                 onLeaveFeedback={this.onLeaveFeedback}\n//               />\n//             </Section>\n\n//             {Object.values(this.state).find(val => val !== 0) ? (\n//               <Section title=\"Statistics\">\n//                 <Statictic\n//                   good={this.state.good}\n//                   neutral={this.state.neutral}\n//                   bad={this.state.bad}\n//                   total={this.countTotalFeedback()}\n//                   positiveFeedback={Math.round(\n//                     this.countPositiveFeedbackPercentage(),\n//                   )}\n//                 />\n//               </Section>\n//             ) : (\n//               <Section>\n//                 <Notification message=\"No feedback given\" />\n//               </Section>\n//             )}\n//           </div>\n//         </Wrapper>\n//       </div>\n//     );\n//   }\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}